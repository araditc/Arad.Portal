using Arad.Portal.DataLayer.Entities.General.User;

using Arad.Portal.DataLayer.Models.Shared;
using Arad.Portal.DataLayer.Models.Product;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Arad.Portal.DataLayer.Entities.General.Comment;
using Arad.Portal.GeneralLibrary.CustomAttributes;
using static Arad.Portal.DataLayer.Models.Shared.Enums;

namespace Arad.Portal.DataLayer.Entities.Shop.Product
{
    public class BaseProduct : BaseEntity
    {
        public BaseProduct()
        {
            GroupNames = new ();
            Specifications = new ();
            Images = new ();
            Prices = new ();
            Comments = new ();
            MultiLingualProperties = new ();
        }


        [BsonId]
        [BsonRepresentation(BsonType.String)]
        public string ProductId { get; set; }
        /// <summary>
        /// the primary key Id of all groups which this product belongs to (a product can belongs more than one productgroup)
        /// </summary>
        public List<string> GroupIds { get; set; }

        /// <summary>
        /// PeoductGroupname of all groups which this product belongs to (a product can belongs more than one productgroup)
        /// </summary>
        public List<string> GroupNames { get; set; }

        /// <summary>
        /// Name, language, currency, seoTitle, seoDescription, tagkeywords will be store here
        /// </summary>
        public List<MultiLingualProperty> MultiLingualProperties { get; set; }

        /// <summary>
        /// a unique code which can be combination of digits and other characters
        /// </summary>
        public string UniqueCode { get; set; }

        /// <summary>
        /// a productCode is a unique code between Product, ProductGroup, Content and ContentCategory entity
        /// which generated by application and lastCode will be store in BasicData Entity with GroupKey ='lastid' 
        /// with product/productCode we can access this entity in store part
        /// </summary>

        public long ProductCode { get; set; }

        public List<ProductSpecificationValue> Specifications { get; set; }
        /// <summary>
        /// it defines type of product whether it is a phisical stuff or a file which can be downloaded
        /// </summary>
        public ProductType ProductType { get; set; }

        public DownloadLimitationType DownloadLimitationType { get; set; }

        public int? AllowedDownloadDurationDay { get; set; }

        public int? AllowedDownloadCount { get; set; }

        public string ProductFileUrl { get; set; }

        public string ProductFileName { get; set; }
        /// <summary>
        /// all images of product will be store here
        /// </summary>
        public List<Image> Images { get; set; }
        /// <summary>
        /// count of product which is avalable for sale
        /// </summary>
        public int Inventory { get; set; }

        /// <summary>
        /// how many of this product entity has been saled
        /// </summary>
        public int SaleCount { get; set; }

        /// <summary>
        /// how many users see this product detail page
        /// </summary>
        public int VisitCount { get; set; }
        /// <summary>
        /// if the value of inventory is less than MinimumCount it notify owner of site
        /// </summary>
        public int MinimumCount { get; set; }
        /// <summary>
        /// Whether to show this product even if it has no inventory or not
        /// </summary>
        public bool ShowInLackOfInventory { get; set; }
        /// <summary>
        /// primary key of user who is the seller of this product
        /// </summary>
        public string SellerUserId { get; set; }


        /// <summary>
        /// username of user who is the seller of this product
        /// </summary>
        public string SellerUserName { get; set; }


        /// <summary>
        /// product unit of this product
        /// </summary>
        public ProductUnit.ProductUnit Unit { get; set; }

        /// <summary>
        /// cause the price of product can be changed in duration of time we have list of price to store history of price and can have price changes
        /// avalable price isActive = true and EndDate = null
        /// </summary>
        public List<Price> Prices { get; set; }

        public Promotion.Promotion Promotion { get; set; }
     
        /// <summary>
        /// sum of scores up to now
        /// </summary>
        public long TotalScore { get; set; }

        /// <summary>
        /// how many people score this product
        /// </summary>
        public int ScoredCount { get; set; }

        public bool IsPublishedOnMainDomain { get; set; }

        public List<Comment> Comments { get; set; }
        
    }
    
}
