<!DOCTYPE html>
@using System.Globalization;
@using Arad.Portal.DataLayer.Models.DesignStructure
@using Arad.Portal.GeneralLibrary.Utilities;
@using HtmlAgilityPack
@using Newtonsoft.Json
@using System.Security.Claims
@using Serilog;

@inject Arad.Portal.UI.Shop.Helpers.LayoutContentProcess process
@inject Arad.Portal.DataLayer.Contracts.Shop.ShoppingCart.IShoppingCartRepository cartRepo
@{
    var direction = HelpersMethods.GetDirection(CultureInfo.CurrentCulture);
    var lang = HelpersMethods.GetHtmlLang(CultureInfo.CurrentCulture);

    if (User.Identity.IsAuthenticated)
    {
        var res = await cartRepo.LoadUserCartShopping(User.Claims
                 .FirstOrDefault(_ => _.Type == ClaimTypes.NameIdentifier).Value);
        ViewBag.BasketCount = res;
    }
}
<html dir="@direction" lang="@lang">
<head>
    <meta charset="utf-8" />
    <meta content="width=device-width, initial-scale=1.0" name="viewport" />

    <meta property="og:title" content="@(ViewData[" PageTitle"])" />
    <meta name="description" content="@(ViewData["SeoDesc"])" />
    <meta name="keywords" content="@(ViewData["Tags"])">
    <title>@($"{ViewData["PageTitle"]}-{ViewData["DomainTitle"]}")</title>

    <link href="~/lib/font-awesome/css/all.css" rel="stylesheet" />
    @if (direction == "ltr")
    {
        <link href="~/lib/bootstrap5/css/bootstrap.min.css" rel="stylesheet" />
    }
    else
    {
        <link href="~/lib/bootstrap5/css/bootstrap.rtl.min.css" rel="stylesheet" />
        <link href="~/Fonts/IranSans/css/fontiran.css" rel="stylesheet" />
    }
    <link rel="stylesheet" href="~/css/Menu/Bootstrap4MegaMenu.css" />
    <link href="~/lib/bootstrap-select/css/bootstrap-select.min.css" rel="stylesheet" />
    <link href="~/css/site.css" rel="stylesheet" />
    <link href="~/lib/owlCarousel/css/owl.carousel.min.css" rel="stylesheet" />
    <link href="~/lib/owlCarousel/css/owl.theme.default.min.css" rel="stylesheet" />
    <link href="~/lib/owlCarousel/css/CarouselCustomArrowKeys.css" rel="stylesheet" />
    <link href="~/css/SpecialProduct.css" rel="stylesheet" />
    <link href="~/css/siteTemplate/FirstContentTemplate.css" rel="stylesheet" />
    <link href="~/css/siteTemplate/ThirdContentTemplate.css" rel="stylesheet" />
    <link href="~/css/siteTemplate/ForthContentTemplate.css" rel="stylesheet" />
    <link href="~/css/siteTemplate/FifthContentTemplate.css" rel="stylesheet" />
    <link href="~/css/siteTemplate/SearchComponent.css" rel="stylesheet" />
    <link href="~/css/StickyNavbar.css" rel="stylesheet" />
    <link href="~/css/header.css" rel="stylesheet" />
    <link href="~/lib/animate.css/animate.compat.css" rel="stylesheet" />
    <link href="~/lib/flag-icons/css/flag-icons.min.css" rel="stylesheet"/>
    @await RenderSectionAsync("Styles", required: false)

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap5/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/bootstrap-select/bootstrap-select.min.js"></script>
    <script src="~/lib/bootstrap-select/js/i18n/defaults-@(CultureInfo.CurrentCulture.Name.Replace('-', '_')).js"></script>
    <script src="~/lib/owlCarousel/js/owl.carousel.min.js"></script>
    @await RenderSectionAsync("Scripts", required: false)
</head>


<body class="mb-0">
    <style>
        .bgCover {
            background-size: cover;
            background-attachment: fixed;
            background-position: center bottom;
        }

        body {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .flagIcon{
            width: 2em !important;
            line-height: normal !important;
            font-size: 20px;
          }
    </style>


    <div class="position-fixed left-50 top-0 p-5" id="toastPanel" style="z-index: 11;">
        <div aria-atomic="true" aria-live="assertive" class="toast" id="mainToast" role="alert" autohide="false">
            <div class="toast-header">
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body p-3 fs-5 rounded-3 text-center" id="mainToastBody">
            </div>
        </div>
    </div>


    <div aria-hidden="true" aria-labelledby="confirmModalLabel" class="modal fade" id="confirmModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-light">
                    <h5 class="modal-title" id="confirmModalLabel">
                    </h5>
                    <button aria-label="Close" class="btn-close" data-bs-dismiss="modal" type="button">
                    </button>
                </div>
                <div class="modal-body" id="confirmModalBody">
                </div>
                <div class="modal-footer">
                    <button class="btn btn-success" onclick="onClickYes()" type="button">
                        @Language.GetString("btn_Confirm")
                    </button>
                    <button class="btn btn-secondary" data-bs-dismiss="modal" type="button">
                        @Language.GetString("btn_NotConfirm")
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div id="loading" class="text-center">
        <div class="spinner-border text-danger" style="width: 4rem; height: 4rem;" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    <header class="dynamicHeaderPart" style=@(process.LayoutModel.HeaderPart != null && !string.IsNullOrWhiteSpace(process.LayoutModel.HeaderPart.CodeColor) ?
            $"background-color:{process.LayoutModel.HeaderPart.CodeColor}" : (process.LayoutModel.HeaderPart != null && !string.IsNullOrWhiteSpace(process.LayoutModel.HeaderPart.BgImage) ?
            $"background-image:{process.LayoutModel.HeaderPart.BgImage}" :""))>
        @* <partial name="~/Views/Shared/_PriorFixedHeader.cshtml" />*@
        @if (process.LayoutModel.HasCustomizedHeader)
        {
            @if (!string.IsNullOrWhiteSpace(process.LayoutModel.HeaderPart.PriorFixedContent))
            {
                @Html.Raw(process.LayoutModel.HeaderPart.PriorFixedContent)
                ;
            }
            @if (process.LayoutModel.HeaderPart.CustomizedContent.Count > 0)
            {
                foreach (RowContent row in process.LayoutModel.HeaderPart.CustomizedContent.OrderBy(_ => _.RowNumber))
                {
                    <div class="row gx-0 @row.ExtraClassNames">
                        @foreach (ColContent column in row.ColsContent.OrderBy(_ => _.ColNumber))
                        {
                            <div class="@column.ColumnClassNames">
                                @{
                                    var htmlDoc = new HtmlDocument();
                                    htmlDoc.LoadHtml(column.ColData);
                                    var div = htmlDoc.DocumentNode.Element("div");

                                    if (div.Attributes["target"].Value == "module")
                                    {
                                        try
                                        {

                                            var module = JsonConvert
                                            .DeserializeObject<ModuleWithParametersValue>(column.ColData.Replace("<div target=\"module\">", "")
                                            .Replace("</div>", ""));
                                            switch (module.ModuleName)
                                            {
                                                case "ProductList":
                                                                                @await Component.InvokeAsync("SpecialProduct",
                new { productType = module.ParametersValue.ProductOrContentType,
                selectionTemplate = module.ParametersValue.ProductTemplateDesign, count = module.ParametersValue.Count,
                loadAnimation = module.ParametersValue.LoadAnimation, loadAnimationType = module.ParametersValue.LoadAnimationType })
                                                    ;
                                                    break;
                                                case "ContentList":
                                                                                @await Component.InvokeAsync("ContentTemplates", module.ParametersValue)
                                                    ;
                                                    break;
                                                case "HorizantalStoreMenu":
                                                                                @await Component.InvokeAsync("StoreMenu")
                                                    ;
                                                    break;
                                                case "ImageTextSlider":
                                                                                @await Component.InvokeAsync("SliderModule", new { sliderId =  module.ParametersValue.SliderId })
                                                    ;
                                                    break;
                                                case "LoginAndProfile":
                                                                                @await Component.InvokeAsync("LoginProfile", new { domainId = module.ParametersValue.DomainId})
                                                    ;
                                                    break;
                                                case "MultiLingualFlags":
                                                                                @await Component.InvokeAsync("MultiLingual")
                                                    ;
                                                    break;
                                                case "GeneralSearch":
                                                                                @await Component.InvokeAsync("GeneralSearch")
                                                    ;
                                                    break;
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            Log.Fatal($"error in loading layout header={ex.ToString()}");
                                        }

                                    }
                                    else if (div.Attributes["target"].Value == "editor")
                                    {
                                        var index = column.ColData.LastIndexOf("</div>");
                                        var data = column.ColData.Substring(0, index);
                                        var htmlRaw = data.Replace("<div target=\"editor\">", "");
                                                                    @Html.Raw(@htmlRaw)
                                        ;
                                    }
                                }
                            </div>
                        }
                    </div>
                    
                }
            }
            @if (!string.IsNullOrWhiteSpace(process.LayoutModel.HeaderPart.LatterFixedContent))
            {
                @Html.Raw(process.LayoutModel.HeaderPart.LatterFixedContent)
                ;
            }
        }
        else
        {
            <div class="navbarMenu">
                @await Component.InvokeAsync("StoreMenu")
            </div>
        }

    </header>


    <div class="container-fluid">

        <div class="position-fixed left-50 top-0 p-5" id="toastPanel" style="z-index: 11;">
            <div aria-atomic="true" aria-live="assertive" class="toast" id="mainToast" role="alert" autohide="false">
                @* width: calc(100% - 400px);top: 40%; left: 200px;position: absolute;*@
                <div class="toast-body p-3 fs-5 rounded-3 text-center" id="mainToastBody">
                </div>
            </div>
        </div>
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="dynamicFooterPart mt-auto" style=@(process.LayoutModel.FooterPart != null && !string.IsNullOrWhiteSpace(process.LayoutModel.FooterPart.CodeColor) ?
            $"background-color:{process.LayoutModel.FooterPart.CodeColor}" : (process.LayoutModel.FooterPart != null && !string.IsNullOrWhiteSpace(process.LayoutModel.FooterPart.BgImage) ?
            $"background-image:{process.LayoutModel.FooterPart.BgImage}" :""))>
        @if (process.LayoutModel.HasCustomizedFooter)
        {
            @if (!string.IsNullOrWhiteSpace(process.LayoutModel.FooterPart.PriorFixedContent))
            {
                @Html.Raw(process.LayoutModel.FooterPart.PriorFixedContent)
                ;
            }
            @if (process.LayoutModel.FooterPart.CustomizedContent.Count > 0)
            {
                foreach (RowContent row in process.LayoutModel.FooterPart.CustomizedContent.OrderBy(_ => _.RowNumber))
                {
                    <div class="row gx-0 @row.ExtraClassNames">
                        @foreach (ColContent column in row.ColsContent.OrderBy(_ => _.ColNumber))
                        {
                            <div class="@column.ColumnClassNames">
                                @{
                                    var htmlDoc = new HtmlDocument();
                                    htmlDoc.LoadHtml(column.ColData);
                                    var div = htmlDoc.DocumentNode.Element("div");

                                    if (div.Attributes["target"].Value == "module")
                                    {
                                        var module = JsonConvert.DeserializeObject<ModuleWithParametersValue>(column.ColData.Replace("<div target=\"module\">", "")
                                        .Replace("</div>", ""));
                                        switch (module.ModuleName)
                                        {
                                            case "ProductList":
                                                                            @await Component.InvokeAsync("SpecialProduct",
                new { productType = module.ParametersValue.ProductOrContentType,
                selectionTemplate = module.ParametersValue.ProductTemplateDesign, count = module.ParametersValue.Count,
                loadAnimation = module.ParametersValue.LoadAnimation, loadAnimationType = module.ParametersValue.LoadAnimationType })
                                                ;
                                                break;
                                            case "ContentList":
                                                                            @await Component.InvokeAsync("ContentTemplates", module.ParametersValue)
                                                ;
                                                break;
                                            case "HorizantalStoreMenu":
                                                                            @await Component.InvokeAsync("StoreMenu")
                                                ;
                                                break;
                                            case "ImageTextSlider":
                                                                            @await Component.InvokeAsync("SliderModule", new { sliderId =  module.ParametersValue.SliderId })
                                                ;
                                                break;
                                            case "LoginAndProfile":
                                                                            @await Component.InvokeAsync("LoginProfile", new { domainId = module.ParametersValue.DomainId})
                                                ;
                                                break;
                                            case "MultiLingualFlags":
                                                                            @await Component.InvokeAsync("MultiLingual")
                                                ;
                                                break;
                                            case "GeneralSearch":
                                                                            @await Component.InvokeAsync("GeneralSearch")
                                                ;
                                                break;
                                        }
                                    }
                                    else if (div.Attributes["target"].Value == "editor")
                                    {
                                        var index = column.ColData.LastIndexOf("</div>");
                                        var data = column.ColData.Substring(0, index);
                                        var htmlRaw = data.Replace("<div target=\"editor\">", "");

                                                                    @Html.Raw(@htmlRaw)
                                        ;
                                    }

                                }
                            </div>
                        }
                    </div>
                }
            }
            @if (!string.IsNullOrWhiteSpace(process.LayoutModel.HeaderPart.LatterFixedContent))
            {
                @Html.Raw(process.LayoutModel.HeaderPart.LatterFixedContent)
                ;
            }
        }
        else
        {
            <p class="m-5">@Language.GetString("AlertAndMessage_NoFooterDesignImplementation")</p>
        }
    </footer>


    <script>
        var confirmUrl;
        var typeOfRequest;
        function setLang(lang) {
            debugger;
            var currentCulture = '@CultureInfo.CurrentCulture.Name';
            if (currentCulture !== lang) {
                $.ajax({
                    type: "GET",
                    url: '/Account/changeLang?langId=' + lang,
                    success: function() {
                        debugger;
                        window.location.reload();
                    }
                });
            }
        }
        function setProductCountInCart(number) {
            debugger;
            $("span.count-basket").text(`${number} ${'@Language.GetString("Stuff")'}`);
        }

        function doAnimations(elems) {
            var animEndEv = "webkitAnimationEnd animationend";

            elems.each(function() {
                var $this = $(this),
                    $animationType = $this.data("animation");
                $this.addClass($animationType).one(animEndEv, function() {
                    $this.removeClass($animationType);
                });
            });
        }

        function changeScreen() {
            var windowSize = $(window).width();
            console.log(windowSize);
            if (windowSize <= 974) {
                $(".nascr").removeClass("d-none").addClass("d-block");
                $(".wiscr").removeClass("d-block").addClass("d-none");
                if ($("#navbar") != undefined) {
                    if ($("#navbar").hasClass("sticky")) {
                        $("#navbar").removeClass("sticky");
                    }
                }
                if($("h6.sliderTitle") != undefined)
                {
                   
                  //  $("div.sliderSubtitle").removeClass("fs-5");
                }
            }
            else {
                $(".nascr").removeClass("d-block").addClass("d-none");
                $(".wiscr").removeClass("d-none").addClass("d-block");

                 if($("h6.sliderTitle") != undefined)
                {
                   
                    
                    //$("div.sliderSubtitle").removeClass("fs-5");
                   
                }
            }
        }
        $(document).ready(function() {
            $(".owl-carousel").owlCarousel({
                loop: true,
                rewind: false,
                rtl: true,
                navigation: true,
                autoplay: true,
                margin: 5,
                animateOut: 'fadeOut',
                animateIn: 'fadeIn',
                responsiveClass: true,
                nav: true,
                dots: false,
                autoplayHoverPause: false,
                items: 7,
                navText: ["<div class='nav-btn prev-slide'><i class='fas fa-chevron-left' style='line-height:5;font-size:larger;'></i></div>",
                    "<div class='nav-btn next-slide'><i class='fas fa-chevron-right' style='line-height:5;font-size:larger;'></i></div>"],
                responsive: {
                    0: {
                        items: 1
                    },
                    600: {
                        items: 5
                    },
                    1000: {
                        items: 7
                    }
                }
            });



            changeScreen();
            $(window).resize(changeScreen);

            $(".menu-area").mouseover(function() {
                var windowSize = $(window).width();
                if (windowSize > 975) {
                    $(this).addClass("show");
                    $(this).find(".dropdown-toggle").addClass("text-primary");
                    $(this).find(".mega-area").addClass("show");
                }
            });

            $(".menu-area").mouseleave(function() {
                var windowSize = $(window).width();
                if (windowSize > 975) {
                    $(this).removeClass("show");
                    $(this).find(".dropdown-toggle").removeClass("text-primary");
                    $(this).find(".mega-area").removeClass("show");
                }
            });

            $(".nav-item .nav-link").mouseover(function() {
                $(this).addClass("text-primary");
            });
            $(".nav-item .nav-link").mouseleave(function() {
                $(this).removeClass("text-primary");
            });

            $(".custmDrp").click(function() {
                debugger;
                var item = $(this).parent().parent().siblings(".mega-area")
                if (item.hasClass("show")) {
                    item.removeClass("show");
                } else {
                    item.addClass("show");
                }
            })

        });
        function showError(msg) {

            document.getElementById('mainToastBody').innerHTML = `<i class="fas fa-exclamation-triangle"></i> ${msg}`;
           $('#mainToastBody').removeClass("alert-success");
           $('#mainToastBody').addClass("alert-danger");
            $("#toastPanel").show();
            var toast = new bootstrap.Toast($("#mainToast"));
            toast.show();
            setTimeout(function () {
                $("#toastPanel").hide();
            }, 2000)
        }
        function AddToFavoriteList(productCode, islike) {
            debugger;
            if (islike == "True") {
                window.location.href = '@Url.Action("Favorites", "Account")' + "?type=product";
            }
            else if ('@User.Identity.IsAuthenticated' == "True") {
                $.ajax({
                    url: '@Url.Action("AddToFavList", "Comment")' + `?code=${productCode}&name=product`,
                    contentType: "application/json",
                    type: "Get",
                    beforeSend: function () {
                    },
                    success: function (result) {
                        debugger;
                        if (result.status == "Succeed") {

                            window.location.reload();
                        }
                    }
                });
            } else
                window.location.href = '@Url.Action("Login", "Account")' + `?returnUrl=${'@ViewBag.LanIcon'}/product/${productCode}`;

        }

        function Rate(score, entityId, hasRateBefore, preRate) {
            debugger;
            var isAllow = false;
            if ('@User.Identity.IsAuthenticated' == 'True') {
                if (hasRateBefore == "True") {
                    if (score != parseInt(preRate))
                        isAllow = true;
                }
                else {
                    isAllow = true;
                }
            } else {
                window.location.href = '@Url.Action("Login", "Account")' + `?returnUrl=${'@ViewBag.LanIcon'}/product/${productCode}`;
            }
            var obj = {};
            if (isAllow) {
                debugger;
                obj.EntityId = entityId;
                obj.IsNew = hasRateBefore != "True";
                obj.Score = parseInt(score);
                obj.IsContent = false;
                $.ajax({
                    url: '@Url.Action("Rate", "Comment")',
                    contentType: "application/json",
                    data: JSON.stringify(obj),
                    type: "Post",
                    beforeSend: function () {
                    },
                    success: function (result) {
                        debugger;
                        if (result.status == "Succeed") {

                            window.location.reload();
                        }
                    }
                });
            }
        }
    </script>
</body>
</html>

