
@model Dictionary<string, bool>;
@{
    ViewData["Title"] = "Index";
    var alert = Language.GetString("AlertAndMessage_GotIt");
     var baseAdd = Config["BaseAddress"];
}


<div class="headPage text-right">
    <h5>@Language.GetString("Menu_Roles")</h5>
    @{
        if (@Model["List"])
        {
                @*<a class="action-head search open" data-toggle="collapse" href="#search">
                    <i class="fa fa-filter" aria-hidden="true"></i>
                </a>*@
        }
    }
    @{
        if (@Model["Add"])
        {
                <a class="action-head add open" data-toggle="collapse" href="#add">
                    <i class="fa fa-plus pt-1" aria-hidden="true"></i>
                </a>
        }
    }
</div>
@{
    if (@Model["Add"])
    {
    @await Component.InvokeAsync("AddRoleComponent")
    }
}
@{
    if (@Model["List"])
    {
    <div class="table">
                <div class="table-head d-none d-lg-block">
                    <div class="table-row">
                        <div class="row m-0">
                            <div class="table-col col-md-1">
                                <span>@Language.GetString("tbl_RowName")</span>
                            </div>
                            <div class="table-col col-md-7">
                                <span>@Language.GetString("tbl_RoleName")</span>
                            </div>
                            <div class="table-col col-md-3">
                                <span></span>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="table" class="table-body">

                </div>
                @await Component.InvokeAsync("LoadingGridData")
                <ul id="pagination" class="pagination-sm"></ul>
    </div>
    }
}

@if (@Model["Remove"])
{
    <!-- Modal remove-->
    <div id="removeModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <a role="button" class="modal-close" data-dismiss="modal"></a>
                <div class="modal-header">
                    <h6 class="modal-title">@Language.GetString("Role_Delete")</h6>
                </div>
                <div class="modal-body text-center">
                    <p class="alert warning">@Language.GetString("AlertAndMessage_DeletionSureness")</p>
                    <button id="delete" type="button" class="btn btn-danger btn-sm btn-modal-body bg-gradient" data-dismiss="modal">@Language.GetString("btn_Delete")</button>
                    <button type="button" class="btn btn-outline-danger btn-sm btn-modal-body bg-gradient" data-dismiss="modal" style="margin-left:5px">@Language.GetString("btn_Cancel")</button>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts{

    <script src="@Url.Content($"~/lib/twbs-pagination/jquery.twbsPagination.js")"></script>
    <script src="@Url.Content($"~/js/tree.js")"></script>
    @if (@Model["List"])
    {
        <script>
            $(document).ready(function () {
                list(pageSize, 1);
                $(document).on("click", ".page-link", function (e) {
                    e.preventDefault();
                    list(pageSize, $pagination.twbsPagination('getCurrentPage'));
                });
            });

        </script>
    }

    @if (@Model["Add"])
    {
<script>
    $(document).ready(function () {

                ListPermissions();

                $("#addRole").submit(function (e) {
                    debugger;
                    e.preventDefault();

                    var persSelect = [];
                    var treesCheck = $("#addRole .tree input[type='checkbox']");

                    treesCheck.each(function(index) {
                        if (treesCheck[index].checked) {

                            var id = treesCheck[index].id;
                            persSelect.push(id);
                        }
                    });

                    var $inputs = $('#addRole :input');
                    var values = {};
                    $inputs.each(function() {
                        values[this.name] = $(this).val();
                    });

                    var active;
                    if ($("input[name='IsActive']").is(":checked")=== true) {
                        active = true;
                    } else active = false;
                    values['IsActive'] = active;

                    values['PermissionIds'] = persSelect;
                    //console.log(values);
                    $.ajax({
                        url: '@Url.Action("Add")',
                        type: 'Post',
                        data: values,
                        beforeSend: function() {
                            $("#loading").css("display", "block");
                        },
                        success: function(result) {
                            var spanErrorList = $('#addRole span[data-val-result]');
                            spanErrorList.html("");
                            spanErrorList.parent().removeClass("has-error");

                            if (result.status === "success") {
                                list(pageSize, 1);
                               
                                document.getElementById('mainToastBody').innerHTML = '<i class="far fa-check-circle"></i>' + result.message;
                                document.getElementById('mainToastBody').classList.add('alert-success');
                                $("#toastPanel").show();
                                 var bsAlert = new bootstrap.Toast($("#mainToast"));
                                 bsAlert.show();

                                setTimeout(function(){
                                    $("#toastPanel").hide();
                                }, 2500);


                            } else if (result.status === "error") {
                                if (spanErrorList.length > 1) {
                                    spanErrorList.each(function() {
                                        $(this).html("");
                                        $(this).parent().removeClass("has-error");
                                    });
                                }

                                if (result.modelStateErrors !== null) {
                                   // console.log(result);
                                    result.modelStateErrors.forEach(function(value, index) {
                                        $("#addRole").find('[data-val-result=' + value.key + ']').html(value.errorMessage);
                                        $("#addRole").find('[data-val-result=' + value.key + ']').parent().addClass("has-error");
                                    });
                                } else {
                                  
                                    showError(result.message);
                                }
                            }

                        },
                        error: function(xhr, ajaxOptions, thrownError) {
                            alert("error");
                            alert(xhr.status);
                            alert(thrownError);
                        },
                        complete: function () {
                            $("#loading").css("display", "none");
                        }
                    });
                });

            });
</script>
    }

    @if (@Model["Details"])
    {
<script>
            $(document).ready(function() {
                $(document).on("click",
                "#editRecord",
                    function (e) {
                        debugger;
                    e.preventDefault();

                    var id = $(this).data("id");
                    var data = { Id: id };
                    var spanErrorList = $('#edit span[data-val-result]');

                    spanErrorList.html("");
                    spanErrorList.parent().removeClass("has-error");
                   
                    $.ajax({
                        url: '@Url.Action("GetRole")',
                        type: 'Get',
                        data: data,
                        beforeSend: function() {
                            $("#loading").css("display", "block");
                        },
                        success: function(result) {

                            if (result.status === "success") {
                                debugger;
                                var role = result.data.role;
                                $("#edit #permissions").load('/role/ListPermissions?currentRoleId=' + role.roleId);
                                $("#edit #RoleName").val(role.roleName);
                                $("#edit #RoleId").val(role.roleId);
                                $("#editModal").modal("show");

                            } else {
                              
                                showError(result.message);
                            }
                        },
                        error: function(xhr, ajaxOptions, thrownError) {
                            alert(xhr.status);
                            alert(thrownError);
                        },
                        complete: function() {
                            $("#loading").css("display", "none");
                        }
                    });
                });

            });
</script>
    }

    @if (@Model["Edit"])
    {
        <script>
            $(document).ready(function () {

            $("#edit").submit(function(e) {
                e.preventDefault();

                var persSelect = [];
                var treesCheck = $("#edit .tree input[type='checkbox']");

                treesCheck.each(function(index) {
                    if (treesCheck[index].checked) {

                        var id = $(treesCheck[index]).attr("name");
                        persSelect.push(id);
                    }
                });
                var $inputs = $('#edit :input');
                var values = {};
                $inputs.each(function() {
                    values[this.name] = $(this).val();
                });
                values['Permissions'] = persSelect;
                values['id'] = $("#Id").val();

                $.ajax({
                    url: '@Url.Action("Edit")',
                    type: 'Post',
                    data: values,
                    beforeSend: function() {
                        $("#loading").css("display", "block");
                    },
                    success: function(result) {
                        var spanErrorList = $('#edit span[data-val-result]');

                        spanErrorList.html("");
                        spanErrorList.parent().removeClass("has-error");
                        if (result.status === "success") {

                            $("#editModal").modal("hide");

                                 toastr.success(result.message);

                            list(pageSize, $pagination.twbsPagination('getCurrentPage'));

                        } else if (result.status === "error") {

                            if (spanErrorList.length > 1) {
                                spanErrorList.each(function() {
                                    $(this).html("");
                                    $(this).parent().removeClass("has-error");
                                });
                            }

                            if (result.modelStateErrors !== null) {

                                result.modelStateErrors.forEach(function(value, index) {

                                    $("#edit").find('[data-val-result=' + value.key + ']')
                                        .html(value.errorMessage);
                                    $("#edit").find('[data-val-result=' + value.key + ']').parent()
                                        .addClass("has-error");
                                });
                            } else {
                                showError(result.message);
                            }
                        }
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        alert(xhr.status);
                        alert(thrownError);
                    },
                    complete: function() {
                        $("#loading").css("display", "none");
                    }
                });
            });
            });
        </script>
    }

    @if (@Model["Remove"])
    {
<script>
            $(document).ready(function() {
                 $(document).on("click",
                "#deleteRecord",
                function(e) {
                    e.preventDefault();
                    var id = $(this).data("id");
                    $("#delete").data("id", id);
                    $("#removeModal").modal("show");

                });

                $(document).on("click", "#delete", function (e) {
                    debugger;
                    e.preventDefault();
                    var id = $(this).data("id");
                    var data = { Id: id };

                    $.ajax({
                        url: '@Url.Action("Delete")',
                        type: 'Get',
                        data: data,
                        beforeSend: function() {
                            $("#loading").css("display", "block");
                        },
                        success: function(result) {
                            debugger;
                            if (result.status === "success") {
                                list(pageSize, $pagination.twbsPagination('getCurrentPage'));

                                $("#removeModal").modal("hide");
                              
                                document.getElementById('mainToastBody').innerHTML = '<i class="far fa-check-circle"></i>'+result.message;
                                document.getElementById('mainToastBody').classList.add('alert-success');
                                $("#toastPanel").show();
                                 var bsAlert = new bootstrap.Toast($("#mainToast"));
                                 bsAlert.show();
                                 setTimeout(function()
                                    {
                                        $("#toastPanel").hide();
                                    },
                                    3000);
                            } else {
                                
                                showError(result.message);
                            }
                        },
                        error: function(xhr, ajaxOptions, thrownError) {
                            alert(xhr.status);
                            alert(thrownError);
                        },
                        complete: function() {
                            $("#loading").css("display", "none");
                        }
                    });
                });
            });
</script>
    }


    <script>
        var pageSize = 5;
        var $pagination = $('#pagination');
        var defaultOpts = {
            visiblePages: 5,
            first: '@Language.GetString("tbl_FirstPage")',
            prev: '@Language.GetString("tbl_PreviousPage")',
            next: '@Language.GetString("tbl_NextPage")',
            last: '@Language.GetString("tbl_LastPage")'
        };

        function list(pageSize, currentPage) {
            var data = { pageSize: pageSize, currentPage: currentPage };
            $.ajax({
                url: '@Url.Action("List")',
                type: 'Post',
                data: data,
                beforeSend: function() {
                    $("#loading-data").css("display", "block");
                },
                success: function(result) {

                    $("#table").html(result);

                    var totalPages = $("#page-data").data("total");
                    var currentPage = $pagination.twbsPagination('getCurrentPage');

                    $pagination.twbsPagination('destroy');

                    if (totalPages > 0) {
                        $pagination.twbsPagination($.extend({},
                            defaultOpts,
                            {
                                startPage: currentPage,
                                totalPages: totalPages
                            }));
                    }
                },
                error: function(xhr, ajaxOptions, thrownError) {
                    alert(xhr.status);
                    alert(thrownError);
                },
                complete: function() {

                    $("#loading-data").css("display", "none");
                }
            });
        }


        function ListPermissions() {
        
            $.ajax({
                url: '@Url.Action("ListPermissions")',
                type: 'Get',
                success: function(result) {
                    $("#permissions").html(result);

                },
                error: function(xhr, ajaxOptions, thrownError) {
                    alert("error");
                    alert(xhr.status);
                    alert(thrownError);
                },
                complete: function() {
                }
            });
        }

    </script>
}
